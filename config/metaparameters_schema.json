{
  "$id": "https://www.peratonlabs.com/r9gift.schema.json",
  "title": "PL-GIFT Algorithm Meta-Parameters",
  "technique": "Transferability of Perturbations",
  "technique_description": "Attempts to reverse engineer a trigger for each individual data sample, transfers the trigger to other samples, and assess whether or not it still works",
  "technique_changes": "Fixed a bug in sentiment classification",
  "commit_id": "xxxxx",
  "repo_name": "https://github.com/perspectalabs/Iliad-GIFT",
  "$schema": "https://json-schema.org/draft-07/schema",
  "description": "TrojAI Round 9 schema for the GIFT team",
  "type": "object",
  "required": [
    "ner_dets",
    "qa_dets",
    "sc_dets"
  ],
  "additionalProperties": false,
  "properties": {
    "ner_dets": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/$defs/ner_det"
      }
    },
    "ner_cls": {
      "oneOf": [
        {
          "$ref": "#/$defs/logreg_cls"
        },
        {
          "$ref": "#/$defs/maxprob_cls"
        },
        {
          "$ref": "#/$defs/mahal_dist_cls"
        },
        {
          "$ref": "#/$defs/nonneg_logreg_cls"
        }
      ]
    },
    "qa_dets": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/$defs/qa_det"
      }
    },
    "qa_cls": {
      "oneOf": [
        {
          "$ref": "#/$defs/logreg_cls"
        },
        {
          "$ref": "#/$defs/maxprob_cls"
        },
        {
          "$ref": "#/$defs/mahal_dist_cls"
        },
        {
          "$ref": "#/$defs/nonneg_logreg_cls"
        }
      ]
    },
    "sc_dets": {
      "type": "array",
      "minItems": 1,
      "items": {
        "$ref": "#/$defs/sc_det"
      }
    },
    "sc_cls": {
      "oneOf": [
        {
          "$ref": "#/$defs/logreg_cls"
        },
        {
          "$ref": "#/$defs/maxprob_cls"
        },
        {
          "$ref": "#/$defs/mahal_dist_cls"
        },
        {
          "$ref": "#/$defs/nonneg_logreg_cls"
        }
      ]
    }
  },
  "$defs": {
    "qa_det": {
      "type": "object",
      "required": [],
      "additionalProperties": false,
      "properties": {
        "trigger_location": {
          "enum": [
            "question",
            "context",
            "both"
          ],
          "description": "location we will try to reverse engineer the trigger in"
        },
        "target": {
          "enum": [
            "CLS",
            "trigger"
          ],
          "description": "what token the loss function will target"
        },
        "trigger_token_length": {
          "type": "integer",
          "minimum": 1,
          "description": "how many tokens we will insert for the reverse engineering process (suggested range: 3-9)",
          "suggested_minimum": 3,
          "suggested_maximum": 9
        },
        "topk_candidate_tokens": {
          "type": "integer",
          "minimum": 1,
          "description": "how many candidate tokens will be evaluated each iteration (suggested range: 75-500)",
          "suggested_minimum": 75,
          "suggested_maximum": 500
        },
        "total_num_update": {
          "type": "integer",
          "minimum": 1,
          "description": "how many passes we will take through each trigger token (suggested range: 1-3)",
          "suggested_minimum": 1,
          "suggested_maximum": 3
        },
        "n_repeats": {
          "type": "integer",
          "minimum": 1,
          "description": "how many times the trigger will appear each place it is inserted (suggested range: 1-5)",
          "suggested_minimum": 1,
          "suggested_maximum": 5
        },
        "end_on_last": {
          "type": "boolean",
          "description": ""
        },
        "logit": {
          "type": "boolean",
          "description": ""
        },
        "ignore_start": {
          "type": "boolean",
          "description": "whether we include the 'start' output channel in the loss function or just focus on the 'end' output"
        }
      }
    },
    "sc_det": {
      "type": "object",
      "required": [],
      "additionalProperties": false,
      "properties": {
        "trigger_location": {
          "enum": [
            "first",
            "second",
            "both",
            "random"
          ],
          "description": "location we will try to reverse engineer the trigger in"
        },
        "target": {
          "enum": ["class", "normal"],
          "description": "what is the target behavior of the trigger"
        },
        "trigger_token_length": {
          "type": "integer",
          "minimum": 1,
          "description": "how many tokens we will insert for the reverse engineering process (suggested range: 3-9)",
          "suggested_minimum": 3,
          "suggested_maximum": 9
        },
        "total_num_update": {
          "type": "integer",
          "minimum": 1,
          "description": "how many passes we will take through each trigger token (suggested range: 1-3)",
          "suggested_minimum": 1,
          "suggested_maximum": 3
        },
        "topk_candidate_tokens": {
          "type": "integer",
          "minimum": 1,
          "description": "how many candidate tokens will be evaluated each iteration (suggested range: 75-500)",
          "suggested_minimum": 75,
          "suggested_maximum": 500
        },
        "n_repeats": {
          "type": "integer",
          "minimum": 1,
          "description": "how many times the trigger will appear each place it is inserted (suggested range: 1-5)",
          "suggested_minimum": 1,
          "suggested_maximum": 5
        }
      }
    },
    "ner_det": {
      "type": "object",
      "required": [],
      "additionalProperties": false,
      "properties": {
        "randloc": {
          "type": "boolean",
          "description": "whether the trigger is inserted in a random location or before a source token"
        },
        "trigger_token_length": {
          "type": "integer",
          "minimum": 1,
          "description": "how many tokens we will insert for the reverse engineering process (suggested range: 3-9)",
          "suggested_minimum": 3,
          "suggested_maximum": 9
        },
        "total_num_update": {
          "type": "integer",
          "minimum": 1,
          "description": "how many passes we will take through each trigger token (suggested range: 1-3)",
          "suggested_minimum": 1,
          "suggested_maximum": 3
        },
        "topk_candidate_tokens": {
          "type": "integer",
          "minimum": 1,
          "description": "how many candidate tokens will be evaluated each iteration (suggested range: 75-500)",
          "suggested_minimum": 75,
          "suggested_maximum": 500
        },
        "n_repeats": {
          "type": "integer",
          "minimum": 1,
          "description": "how many times the trigger will appear each place it is inserted (suggested range: 1-5)",
          "suggested_minimum": 1,
          "suggested_maximum": 5
        }
      }
    },
    "logreg_cls": {
      "type": "object",
      "description": "basic logistic regression classifier",
      "required": ["name"],
      "additionalProperties": false,
      "properties": {
        "name": {"enum": ["logreg_cls"]},
        "C": {
          "type": "number",
          "minimum": 0,
          "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive (suggested range: 0.1-20)",
          "suggested_minimum": 0.1,
          "suggested_maximum": 20.0
        }
      }
    },
    "nonneg_logreg_cls": {
      "type": "object",
      "description": "logistic regression classifier that iteratively removes negatively correlated raw scores as a form of prior/regularization",
      "required": ["name"],
      "additionalProperties": false,
      "properties": {
        "name": {"enum": ["nonneg_logreg_cls"]},
        "C": {
          "type": "number",
          "minimum": 0,
          "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive (suggested range: 0.1-20)",
          "suggested_minimum": 0.1,
          "suggested_maximum": 20.0
        },
        "polarity": {"enum": ["pos", "neg"]}
      }
    },
    "maxprob_cls": {
      "type": "object",
      "description": "logistic regression classifier that first calibrates each feature by itself, then picks the maximum probability of trojan ",
      "required": ["name"],
      "additionalProperties": false,
      "properties": {
        "name": {"enum": ["maxprob_cls"]},
        "C": {
          "type": "number",
          "minimum": 0,
          "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive (suggested range: 0.1-20)",
          "suggested_minimum": 0.1,
          "suggested_maximum": 20.0
        },
        "polarity": {"enum": ["pos", "neg"]}
      }
    },
    "mahal_dist_cls": {
      "type": "object",
      "description": "classifier based on Mahalanobis distance, final probability based on 1-feature logistic regression",
      "required": ["name"],
      "additionalProperties": false,
      "properties": {
        "name": {"enum": ["mahal_dist_cls"]},
        "C": {
          "type": "number",
          "minimum": 0,
          "description": "sklearn-style regularization term.  Higher C -> less regularization. Must be positive (suggested range: 0.1-20)",
          "suggested_minimum": 0.1,
          "suggested_maximum": 20.0
        }
      }
    }
  }
}
  
  
  
  